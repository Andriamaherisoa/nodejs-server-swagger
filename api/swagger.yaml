---
swagger: "2.0"
info:
  description: "This is a sample server Advertisement server. M2 IWOCS"
  version: "1.0.0"
  title: "Swagger Advertisement"
basePath: "/v1"
tags:
- name: "advertisement"
  description: "Everything about advertisements"
- name: "question/answer"
  description: "Access to question/answer"
- name: "user"
  description: "Operations about user"
  externalDocs:
    description: "Find out more about our store"
    url: "http://swagger.io"
schemes:
- "https"
- "http"
paths:
  /advertisements:
    post:
      tags:
      - "advertisement"
      summary: "Add a new advertisement"
      description: ""
      operationId: "addAdvertisement"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Pet object that needs to be added to the store"
        required: true
        schema:
          $ref: "#/definitions/Advertisement"
      responses:
        "405":
          description: "Invalid input"
      security:
      - realestate_auth:
        - "write:advertisements"
        - "read:advertisements"
      x-swagger-router-controller: "Advertisement"
    put:
      tags:
      - "advertisement"
      summary: "Update an existing advertisement"
      description: ""
      operationId: "updateAdvertisement"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Pet object that needs to be added to the store"
        required: true
        schema:
          $ref: "#/definitions/Advertisement"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Pet not found"
        "405":
          description: "Validation exception"
      security:
      - realestate_auth:
        - "write:advertisements"
        - "read:advertisements"
      x-swagger-router-controller: "Advertisement"
  /advertisements/findByStatus:
    get:
      tags:
      - "advertisement"
      summary: "Finds Pets by status"
      description: "Multiple status values can be provided with comma separated strings"
      operationId: "findAdvertisementsByStatus"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "status"
        in: "query"
        description: "Status values that need to be considered for filter"
        required: true
        type: "array"
        items:
          type: "string"
          default: "available"
          enum:
          - "available"
          - "pending"
          - "sold"
        collectionFormat: "multi"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Advertisement"
        "400":
          description: "Invalid status value"
      security:
      - realestate_auth:
        - "write:advertisements"
        - "read:advertisements"
      x-swagger-router-controller: "Advertisement"
  /advertisements/{advertisementId}:
    get:
      tags:
      - "advertisement"
      summary: "Find advertisement by ID"
      description: "Returns a single advertisement"
      operationId: "getAdvertisementById"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "advertisementId"
        in: "path"
        description: "ID of advertisement to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Advertisement"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Advertisement not found"
      security:
      - api_key: []
      x-swagger-router-controller: "Advertisement"
    post:
      tags:
      - "advertisement"
      summary: "Updates a advertisement in the store with form data"
      description: ""
      operationId: "updateAdvertisementWithForm"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "advertisementId"
        in: "path"
        description: "ID of advertisement that needs to be updated"
        required: true
        type: "integer"
        format: "int64"
      - name: "name"
        in: "formData"
        description: "Updated name of the advertisement"
        required: false
        type: "string"
      - name: "status"
        in: "formData"
        description: "Updated status of the advertisement"
        required: false
        type: "string"
      responses:
        "405":
          description: "Invalid input"
      security:
      - realestate_auth:
        - "write:advertisements"
        - "read:advertisements"
      x-swagger-router-controller: "Advertisement"
    delete:
      tags:
      - "advertisement"
      summary: "Deletes an advertisement"
      description: ""
      operationId: "deleteAdvertisement"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "api_key"
        in: "header"
        required: false
        type: "string"
      - name: "advertisementId"
        in: "path"
        description: "Advertisement id to delete"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Pet not found"
      security:
      - realestate_auth:
        - "write:advertisements"
        - "read:advertisements"
      x-swagger-router-controller: "Advertisement"
  /advertisements/{advertisementId}/uploadImage:
    post:
      tags:
      - "advertisement"
      summary: "uploads an image"
      description: ""
      operationId: "uploadFile"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/json"
      parameters:
      - name: "advertisementId"
        in: "path"
        description: "ID of pet to update"
        required: true
        type: "integer"
        format: "int64"
      - name: "additionalMetadata"
        in: "formData"
        description: "Additional data to pass to server"
        required: false
        type: "string"
      - name: "file"
        in: "formData"
        description: "file to upload"
        required: false
        type: "file"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/ApiResponse"
      security:
      - realestate_auth:
        - "write:advertisements"
        - "read:advertisements"
      x-swagger-router-controller: "Advertisement"
  /advertisements/{advertisementId}/questions:
    get:
      tags:
      - "question/answer"
      summary: "Find all advertisement questions"
      description: "Returns an array of Question"
      operationId: "getAdvertisementQuestions"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "advertisementId"
        in: "path"
        description: "ID of advertisement"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Advertisement"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Advertisement not found"
      security:
      - realestate_auth:
        - "write:advertisements"
        - "read:advertisements"
      x-swagger-router-controller: "Questionanswer"
    put:
      tags:
      - "question/answer"
      summary: "Update advertisement's question"
      description: "Returns a Question"
      operationId: "updateAdvertisementQuestionById"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "advertisementId"
        in: "path"
        description: "ID of advertisement"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Question"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Question not found"
      security:
      - realestate_auth:
        - "write:advertisements"
      x-swagger-router-controller: "Questionanswer"
  /advertisements/{advertisementId}/questions/{questionId}:
    get:
      tags:
      - "question/answer"
      summary: "Find advertisement's question by Id"
      description: "Returns a Question"
      operationId: "getAdvertisementQuestionById"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "advertisementId"
        in: "path"
        description: "ID of advertisement"
        required: true
        type: "integer"
        format: "int64"
      - name: "questionId"
        in: "path"
        description: "ID of question"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Question"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Question not found"
      security:
      - realestate_auth:
        - "read:advertisements"
      x-swagger-router-controller: "Questionanswer"
    delete:
      tags:
      - "question/answer"
      summary: "Delete advertisement's question by Id"
      description: "Returns a Question"
      operationId: "deleteAdvertisementQuestionById"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "advertisementId"
        in: "path"
        description: "ID of advertisement"
        required: true
        type: "integer"
        format: "int64"
      - name: "questionId"
        in: "path"
        description: "ID of question"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Question"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Question not found"
      security:
      - realestate_auth:
        - "read:advertisements"
        - "write:advertisements"
      x-swagger-router-controller: "Questionanswer"
  /advertisements/{advertisementId}/questions/{questionId}/anwsers:
    post:
      tags:
      - "question/answer"
      summary: "Add a new answer to a question"
      description: ""
      operationId: "addAdvertisementQuestionAnswer"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Answer object that needs to be added to the question answers's\
          \ attribute"
        required: true
        schema:
          $ref: "#/definitions/Answer"
      - name: "advertisementId"
        in: "path"
        description: "Advertisement's Id"
        required: true
        type: "integer"
        format: "int64"
      - name: "questionId"
        in: "path"
        description: "Advertisement question's Id"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "405":
          description: "Invalid input"
      security:
      - realestate_auth:
        - "write:advertisements"
        - "read:advertisements"
      x-swagger-router-controller: "Questionanswer"
    put:
      tags:
      - "question/answer"
      summary: "Update an existing question's answer"
      description: ""
      operationId: "updateAdvertisementQuestionAnswer"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Answer object that needs to be added to the question answers's\
          \ attribute"
        required: true
        schema:
          $ref: "#/definitions/Answer"
      - name: "advertisementId"
        in: "path"
        description: "Advertisement's Id"
        required: true
        type: "integer"
        format: "int64"
      - name: "questionId"
        in: "path"
        description: "Advertisement question's Id"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "404":
          description: "Pet not found"
        "405":
          description: "Validation exception"
      security:
      - realestate_auth:
        - "write:answers"
        - "read:answers"
      x-swagger-router-controller: "Questionanswer"
  /advertisements/{advertisementId}/questions/{questionId}/anwsers/{answerId}:
    get:
      tags:
      - "question/answer"
      summary: "Find advertisement's question by Id"
      description: "Returns a Question"
      operationId: "getAdvertisementQuestionAnswerById"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "advertisementId"
        in: "path"
        description: "ID of advertisement"
        required: true
        type: "integer"
        format: "int64"
      - name: "questionId"
        in: "path"
        description: "ID of question"
        required: true
        type: "integer"
        format: "int64"
      - name: "answerId"
        in: "path"
        description: "ID of answerId"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Question"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Question not found"
      security:
      - realestate_auth:
        - "read:advertisements"
      x-swagger-router-controller: "Questionanswer"
    delete:
      tags:
      - "question/answer"
      summary: "Delete advertisement's question by Id"
      description: "Returns a Question"
      operationId: "deleteAdvertisementQuestionAnswerById"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "advertisementId"
        in: "path"
        description: "ID of advertisement"
        required: true
        type: "integer"
        format: "int64"
      - name: "questionId"
        in: "path"
        description: "ID of question"
        required: true
        type: "integer"
        format: "int64"
      - name: "answerId"
        in: "path"
        description: "ID of answerId"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Question"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Question not found"
      security:
      - realestate_auth:
        - "read:answers"
        - "write:answers"
      x-swagger-router-controller: "Questionanswer"
  /user:
    post:
      tags:
      - "user"
      summary: "Create user"
      description: "This can only be done by the logged in user."
      operationId: "createUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
      x-swagger-router-controller: "User"
  /user/createWithArray:
    post:
      tags:
      - "user"
      summary: "Creates list of users with given input array"
      description: ""
      operationId: "createUsersWithArrayInput"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "List of user object"
        required: true
        schema:
          type: "array"
          items:
            $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
      x-swagger-router-controller: "User"
  /user/createWithList:
    post:
      tags:
      - "user"
      summary: "Creates list of users with given input array"
      description: ""
      operationId: "createUsersWithListInput"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "List of user object"
        required: true
        schema:
          type: "array"
          items:
            $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
      x-swagger-router-controller: "User"
  /user/login:
    get:
      tags:
      - "user"
      summary: "Logs user into the system"
      description: ""
      operationId: "loginUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "query"
        description: "The user name for login"
        required: true
        type: "string"
      - name: "password"
        in: "query"
        description: "The password for login in clear text"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          headers:
            X-Rate-Limit:
              type: "integer"
              format: "int32"
              description: "calls per hour allowed by the user"
            X-Expires-After:
              type: "string"
              format: "date-time"
              description: "date in UTC when token expires"
          schema:
            type: "string"
        "400":
          description: "Invalid username/password supplied"
      x-swagger-router-controller: "User"
  /user/logout:
    get:
      tags:
      - "user"
      summary: "Logs out current logged in user session"
      description: ""
      operationId: "logoutUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters: []
      responses:
        default:
          description: "successful operation"
      x-swagger-router-controller: "User"
  /user/{username}:
    get:
      tags:
      - "user"
      summary: "Get user by user name"
      description: ""
      operationId: "getUserByName"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be fetched. Use user1 for testing. "
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        "400":
          description: "Invalid username supplied"
        "404":
          description: "User not found"
      x-swagger-router-controller: "User"
    put:
      tags:
      - "user"
      summary: "Updated user"
      description: "This can only be done by the logged in user."
      operationId: "updateUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "name that need to be updated"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Updated user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        "400":
          description: "Invalid user supplied"
        "404":
          description: "User not found"
      x-swagger-router-controller: "User"
    delete:
      tags:
      - "user"
      summary: "Delete user"
      description: "This can only be done by the logged in user."
      operationId: "deleteUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be deleted"
        required: true
        type: "string"
      responses:
        "400":
          description: "Invalid username supplied"
        "404":
          description: "User not found"
      x-swagger-router-controller: "User"
securityDefinitions:
  realestate_auth:
    type: "oauth2"
    authorizationUrl: "http://petstore.swagger.io/oauth/dialog"
    flow: "implicit"
    scopes:
      write:advertisements: "modify advertisement in your account"
      read:advertisements: "read your advertisements"
      write:questions: "modify question of an advertisement in your account"
      read:questions: "read your advertisements's question"
      write:answers: "modify question's answer of an advertisement in your account"
      read:answers: "read your advertisements's question's answers"
  api_key:
    type: "apiKey"
    name: "api_key"
    in: "header"
definitions:
  Advertisement:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      title:
        type: "string"
      targetType: {}
      status: {}
      price:
        type: "number"
      availabilityDate:
        type: "string"
        format: "date-time"
      photoUrls:
        type: "array"
        xml:
          name: "photoUrl"
          wrapped: true
        items:
          type: "string"
      questions:
        type: "array"
        xml:
          name: "question"
          wrapped: true
        items:
          $ref: "#/definitions/Question"
    xml:
      name: "Advertisement"
    example:
      photoUrls:
      - "photoUrls"
      - "photoUrls"
      price: 6.02745618307040320615897144307382404804229736328125
      questions:
      - answers:
        - id: 5
          text: "text"
        - id: 5
          text: "text"
        id: 1
        text: "text"
      - answers:
        - id: 5
          text: "text"
        - id: 5
          text: "text"
        id: 1
        text: "text"
      availabilityDate: "2000-01-23T04:56:07.000+00:00"
      targetType: ""
      id: 0
      title: "title"
      status: ""
  Question:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      text:
        type: "string"
      answers:
        type: "array"
        xml:
          name: "answer"
          wrapped: true
        items:
          $ref: "#/definitions/Answer"
    xml:
      name: "Question"
    example:
      answers:
      - id: 5
        text: "text"
      - id: 5
        text: "text"
      id: 1
      text: "text"
  Answer:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      text:
        type: "string"
    xml:
      name: "Answer"
    example:
      id: 5
      text: "text"
  User:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      username:
        type: "string"
      firstName:
        type: "string"
      lastName:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
      phone:
        type: "string"
      userStatus:
        type: "integer"
        format: "int32"
        description: "User Status"
    xml:
      name: "User"
    example:
      firstName: "firstName"
      lastName: "lastName"
      password: "password"
      userStatus: 6
      phone: "phone"
      id: 0
      email: "email"
      username: "username"
  ApiResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
      type:
        type: "string"
      message:
        type: "string"
    example:
      code: 0
      type: "type"
      message: "message"
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"
